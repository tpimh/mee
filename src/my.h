/* my.h generated by valac 0.20.0, the Vala compiler, do not modify */


#ifndef __MY_H__
#define __MY_H__

#include <glib.h>
#include <glib-object.h>
#include <stdlib.h>
#include <string.h>

G_BEGIN_DECLS


#define MY_TYPE_ILIST (my_ilist_get_type ())
#define MY_ILIST(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MY_TYPE_ILIST, MyIList))
#define MY_IS_ILIST(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MY_TYPE_ILIST))
#define MY_ILIST_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), MY_TYPE_ILIST, MyIListIface))

typedef struct _MyIList MyIList;
typedef struct _MyIListIface MyIListIface;

#define MY_TYPE_ITERABLE (my_iterable_get_type ())
#define MY_ITERABLE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MY_TYPE_ITERABLE, MyIterable))
#define MY_IS_ITERABLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MY_TYPE_ITERABLE))
#define MY_ITERABLE_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), MY_TYPE_ITERABLE, MyIterableIface))

typedef struct _MyIterable MyIterable;
typedef struct _MyIterableIface MyIterableIface;

#define MY_TYPE_ITERATOR (my_iterator_get_type ())
#define MY_ITERATOR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MY_TYPE_ITERATOR, MyIterator))
#define MY_ITERATOR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), MY_TYPE_ITERATOR, MyIteratorClass))
#define MY_IS_ITERATOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MY_TYPE_ITERATOR))
#define MY_IS_ITERATOR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), MY_TYPE_ITERATOR))
#define MY_ITERATOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), MY_TYPE_ITERATOR, MyIteratorClass))

typedef struct _MyIterator MyIterator;
typedef struct _MyIteratorClass MyIteratorClass;

#define MY_TYPE_IEQUATABLE (my_iequatable_get_type ())
#define MY_IEQUATABLE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MY_TYPE_IEQUATABLE, MyIEquatable))
#define MY_IS_IEQUATABLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MY_TYPE_IEQUATABLE))
#define MY_IEQUATABLE_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), MY_TYPE_IEQUATABLE, MyIEquatableIface))

typedef struct _MyIEquatable MyIEquatable;
typedef struct _MyIEquatableIface MyIEquatableIface;

#define MY_TYPE_LIST (my_list_get_type ())
#define MY_LIST(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MY_TYPE_LIST, MyList))
#define MY_LIST_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), MY_TYPE_LIST, MyListClass))
#define MY_IS_LIST(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MY_TYPE_LIST))
#define MY_IS_LIST_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), MY_TYPE_LIST))
#define MY_LIST_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), MY_TYPE_LIST, MyListClass))

typedef struct _MyList MyList;
typedef struct _MyListClass MyListClass;
typedef struct _MyListPrivate MyListPrivate;

#define MY_TYPE_BYTE_VECTOR (my_byte_vector_get_type ())
#define MY_BYTE_VECTOR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MY_TYPE_BYTE_VECTOR, MyByteVector))
#define MY_BYTE_VECTOR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), MY_TYPE_BYTE_VECTOR, MyByteVectorClass))
#define MY_IS_BYTE_VECTOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MY_TYPE_BYTE_VECTOR))
#define MY_IS_BYTE_VECTOR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), MY_TYPE_BYTE_VECTOR))
#define MY_BYTE_VECTOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), MY_TYPE_BYTE_VECTOR, MyByteVectorClass))

typedef struct _MyByteVector MyByteVector;
typedef struct _MyByteVectorClass MyByteVectorClass;
typedef struct _MyByteVectorPrivate MyByteVectorPrivate;

#define MY_TYPE_BYTE_VECTOR_COLLECTION (my_byte_vector_collection_get_type ())
#define MY_BYTE_VECTOR_COLLECTION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MY_TYPE_BYTE_VECTOR_COLLECTION, MyByteVectorCollection))
#define MY_BYTE_VECTOR_COLLECTION_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), MY_TYPE_BYTE_VECTOR_COLLECTION, MyByteVectorCollectionClass))
#define MY_IS_BYTE_VECTOR_COLLECTION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MY_TYPE_BYTE_VECTOR_COLLECTION))
#define MY_IS_BYTE_VECTOR_COLLECTION_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), MY_TYPE_BYTE_VECTOR_COLLECTION))
#define MY_BYTE_VECTOR_COLLECTION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), MY_TYPE_BYTE_VECTOR_COLLECTION, MyByteVectorCollectionClass))

typedef struct _MyByteVectorCollection MyByteVectorCollection;
typedef struct _MyByteVectorCollectionClass MyByteVectorCollectionClass;
typedef struct _MyByteVectorCollectionPrivate MyByteVectorCollectionPrivate;

#define MY_TYPE_IDICTIONARY (my_idictionary_get_type ())
#define MY_IDICTIONARY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MY_TYPE_IDICTIONARY, MyIDictionary))
#define MY_IS_IDICTIONARY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MY_TYPE_IDICTIONARY))
#define MY_IDICTIONARY_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), MY_TYPE_IDICTIONARY, MyIDictionaryIface))

typedef struct _MyIDictionary MyIDictionary;
typedef struct _MyIDictionaryIface MyIDictionaryIface;

#define MY_TYPE_DICTIONARY (my_dictionary_get_type ())
#define MY_DICTIONARY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MY_TYPE_DICTIONARY, MyDictionary))
#define MY_DICTIONARY_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), MY_TYPE_DICTIONARY, MyDictionaryClass))
#define MY_IS_DICTIONARY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MY_TYPE_DICTIONARY))
#define MY_IS_DICTIONARY_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), MY_TYPE_DICTIONARY))
#define MY_DICTIONARY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), MY_TYPE_DICTIONARY, MyDictionaryClass))

typedef struct _MyDictionary MyDictionary;
typedef struct _MyDictionaryClass MyDictionaryClass;
typedef struct _MyDictionaryPrivate MyDictionaryPrivate;

#define MY_TYPE_ENTRY (my_entry_get_type ())
#define MY_ENTRY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MY_TYPE_ENTRY, MyEntry))
#define MY_ENTRY_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), MY_TYPE_ENTRY, MyEntryClass))
#define MY_IS_ENTRY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MY_TYPE_ENTRY))
#define MY_IS_ENTRY_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), MY_TYPE_ENTRY))
#define MY_ENTRY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), MY_TYPE_ENTRY, MyEntryClass))

typedef struct _MyEntry MyEntry;
typedef struct _MyEntryClass MyEntryClass;
typedef struct _MyEntryPrivate MyEntryPrivate;
typedef struct _MyIteratorPrivate MyIteratorPrivate;

#define MY_TYPE_PTR_LIST (my_ptr_list_get_type ())
#define MY_PTR_LIST(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MY_TYPE_PTR_LIST, MyPtrList))
#define MY_PTR_LIST_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), MY_TYPE_PTR_LIST, MyPtrListClass))
#define MY_IS_PTR_LIST(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MY_TYPE_PTR_LIST))
#define MY_IS_PTR_LIST_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), MY_TYPE_PTR_LIST))
#define MY_PTR_LIST_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), MY_TYPE_PTR_LIST, MyPtrListClass))

typedef struct _MyPtrList MyPtrList;
typedef struct _MyPtrListClass MyPtrListClass;
typedef struct _MyPtrListPrivate MyPtrListPrivate;

struct _MyIListIface {
	GTypeInterface parent_iface;
	gpointer (*get) (MyIList* self, gint index);
	void (*set) (MyIList* self, gint index, gconstpointer val);
	void (*add) (MyIList* self, gconstpointer item);
	void (*add_range) (MyIList* self, gpointer* items, int items_length1);
	void (*add_collection) (MyIList* self, MyIList* coll);
	gboolean (*contains) (MyIList* self, gconstpointer item);
	void (*insert) (MyIList* self, gint position, gconstpointer item);
	void (*insert_all) (MyIList* self, gint position, gpointer* items, int items_length1);
	void (*insert_collection) (MyIList* self, gint position, MyIList* coll);
	void (*reverse) (MyIList* self);
	gint (*index_of) (MyIList* self, gconstpointer item);
	gint* (*index_of_all) (MyIList* self, gconstpointer item, int* result_length1);
	void (*remove) (MyIList* self, gconstpointer item);
	void (*remove_at) (MyIList* self, gint index);
	void (*remove_all) (MyIList* self, gconstpointer item);
	void (*remove_range) (MyIList* self, gint start, gint length);
	gint (*get_size) (MyIList* self);
};

struct _MyIterableIface {
	GTypeInterface parent_iface;
	MyIterator* (*iterator) (MyIterable* self);
};

struct _MyIEquatableIface {
	GTypeInterface parent_iface;
	gboolean (*equals) (MyIEquatable* self, GObject* other);
};

struct _MyList {
	GObject parent_instance;
	MyListPrivate * priv;
};

struct _MyListClass {
	GObjectClass parent_class;
};

struct _MyByteVector {
	MyList parent_instance;
	MyByteVectorPrivate * priv;
};

struct _MyByteVectorClass {
	MyListClass parent_class;
};

struct _MyByteVectorCollection {
	MyList parent_instance;
	MyByteVectorCollectionPrivate * priv;
};

struct _MyByteVectorCollectionClass {
	MyListClass parent_class;
};

struct _MyIDictionaryIface {
	GTypeInterface parent_iface;
	void (*add) (MyIDictionary* self, gconstpointer key, gconstpointer val);
	gpointer (*get) (MyIDictionary* self, gconstpointer key);
	void (*set) (MyIDictionary* self, gconstpointer key, gconstpointer val);
	gboolean (*unset) (MyIDictionary* self, gconstpointer key, gpointer* val);
	gboolean (*has_key) (MyIDictionary* self, gconstpointer key);
	gboolean (*has_value) (MyIDictionary* self, gconstpointer val);
	MyIList* (*get_keys) (MyIDictionary* self);
	MyIList* (*get_values) (MyIDictionary* self);
	gint (*get_size) (MyIDictionary* self);
};

struct _MyDictionary {
	GObject parent_instance;
	MyDictionaryPrivate * priv;
};

struct _MyDictionaryClass {
	GObjectClass parent_class;
};

struct _MyEntry {
	GTypeInstance parent_instance;
	volatile int ref_count;
	MyEntryPrivate * priv;
};

struct _MyEntryClass {
	GTypeClass parent_class;
	void (*finalize) (MyEntry *self);
};

struct _MyIterator {
	GTypeInstance parent_instance;
	volatile int ref_count;
	MyIteratorPrivate * priv;
};

struct _MyIteratorClass {
	GTypeClass parent_class;
	void (*finalize) (MyIterator *self);
};

struct _MyPtrList {
	MyList parent_instance;
	MyPtrListPrivate * priv;
};

struct _MyPtrListClass {
	MyListClass parent_class;
};


GType my_ilist_get_type (void) G_GNUC_CONST;
gpointer my_iterator_ref (gpointer instance);
void my_iterator_unref (gpointer instance);
GParamSpec* my_param_spec_iterator (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void my_value_set_iterator (GValue* value, gpointer v_object);
void my_value_take_iterator (GValue* value, gpointer v_object);
gpointer my_value_get_iterator (const GValue* value);
GType my_iterator_get_type (void) G_GNUC_CONST;
GType my_iterable_get_type (void) G_GNUC_CONST;
GType my_iequatable_get_type (void) G_GNUC_CONST;
GType my_list_get_type (void) G_GNUC_CONST;
GType my_byte_vector_get_type (void) G_GNUC_CONST;
MyByteVector* my_byte_vector_new (const gchar* init);
MyByteVector* my_byte_vector_construct (GType object_type, const gchar* init);
void my_byte_vector_add_string (MyByteVector* self, const gchar* str);
gchar* my_byte_vector_substring (MyByteVector* self, gint start, gint end);
MyByteVector* my_byte_vector_mid (MyByteVector* self, gint start, gint length);
guint my_byte_vector_to_uint (MyByteVector* self, gboolean most);
gulong my_byte_vector_to_ulong (MyByteVector* self, gboolean most);
gushort my_byte_vector_to_ushort (MyByteVector* self, gboolean most);
MyByteVector* my_byte_vector_from_ulong (gulong value, gboolean most);
MyByteVector* my_byte_vector_from_uint (guint value, gboolean most);
gchar* my_byte_vector_to_string (MyByteVector* self);
GType my_byte_vector_collection_get_type (void) G_GNUC_CONST;
MyByteVectorCollection* my_byte_vector_collection_new (void);
MyByteVectorCollection* my_byte_vector_collection_construct (GType object_type);
MyByteVector* my_byte_vector_collection_to_bytevector (MyByteVectorCollection* self, MyByteVector* separator);
GType my_idictionary_get_type (void) G_GNUC_CONST;
GType my_dictionary_get_type (void) G_GNUC_CONST;
MyDictionary* my_dictionary_new (GType k_type, GBoxedCopyFunc k_dup_func, GDestroyNotify k_destroy_func, GType v_type, GBoxedCopyFunc v_dup_func, GDestroyNotify v_destroy_func, GEqualFunc key_equal, GEqualFunc value_equal);
MyDictionary* my_dictionary_construct (GType object_type, GType k_type, GBoxedCopyFunc k_dup_func, GDestroyNotify k_destroy_func, GType v_type, GBoxedCopyFunc v_dup_func, GDestroyNotify v_destroy_func, GEqualFunc key_equal, GEqualFunc value_equal);
GEqualFunc my_dictionary_get_keys_func (MyDictionary* self);
GEqualFunc my_dictionary_get_values_func (MyDictionary* self);
gpointer my_entry_ref (gpointer instance);
void my_entry_unref (gpointer instance);
GParamSpec* my_param_spec_entry (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void my_value_set_entry (GValue* value, gpointer v_object);
void my_value_take_entry (GValue* value, gpointer v_object);
gpointer my_value_get_entry (const GValue* value);
GType my_entry_get_type (void) G_GNUC_CONST;
MyIList* my_dictionary_get_entries (MyDictionary* self);
MyEntry* my_entry_new (GType k_type, GBoxedCopyFunc k_dup_func, GDestroyNotify k_destroy_func, GType v_type, GBoxedCopyFunc v_dup_func, GDestroyNotify v_destroy_func, gconstpointer k, gconstpointer v);
MyEntry* my_entry_construct (GType object_type, GType k_type, GBoxedCopyFunc k_dup_func, GDestroyNotify k_destroy_func, GType v_type, GBoxedCopyFunc v_dup_func, GDestroyNotify v_destroy_func, gconstpointer k, gconstpointer v);
gconstpointer my_entry_get_key (MyEntry* self);
void my_entry_set_key (MyEntry* self, gconstpointer value);
gconstpointer my_entry_get_value (MyEntry* self);
void my_entry_set_value (MyEntry* self, gconstpointer value);
GEqualFunc my_functions_equal_func_for (GType t);
GCompareFunc my_functions_compare_func_for (GType t);
gint my_functions_direct_compare (void* _val1, void* _val2);
void my_idictionary_add (MyIDictionary* self, gconstpointer key, gconstpointer val);
gpointer my_idictionary_get (MyIDictionary* self, gconstpointer key);
void my_idictionary_set (MyIDictionary* self, gconstpointer key, gconstpointer val);
gboolean my_idictionary_unset (MyIDictionary* self, gconstpointer key, gpointer* val);
gboolean my_idictionary_has_key (MyIDictionary* self, gconstpointer key);
gboolean my_idictionary_has_value (MyIDictionary* self, gconstpointer val);
MyIList* my_idictionary_get_keys (MyIDictionary* self);
MyIList* my_idictionary_get_values (MyIDictionary* self);
gint my_idictionary_get_size (MyIDictionary* self);
gboolean my_iequatable_equals (MyIEquatable* self, GObject* other);
gpointer my_ilist_get (MyIList* self, gint index);
void my_ilist_set (MyIList* self, gint index, gconstpointer val);
void my_ilist_add (MyIList* self, gconstpointer item);
void my_ilist_add_range (MyIList* self, gpointer* items, int items_length1);
void my_ilist_add_collection (MyIList* self, MyIList* coll);
gboolean my_ilist_contains (MyIList* self, gconstpointer item);
void my_ilist_insert (MyIList* self, gint position, gconstpointer item);
void my_ilist_insert_all (MyIList* self, gint position, gpointer* items, int items_length1);
void my_ilist_insert_collection (MyIList* self, gint position, MyIList* coll);
void my_ilist_reverse (MyIList* self);
gint my_ilist_index_of (MyIList* self, gconstpointer item);
gint* my_ilist_index_of_all (MyIList* self, gconstpointer item, int* result_length1);
void my_ilist_remove (MyIList* self, gconstpointer item);
void my_ilist_remove_at (MyIList* self, gint index);
void my_ilist_remove_all (MyIList* self, gconstpointer item);
void my_ilist_remove_range (MyIList* self, gint start, gint length);
gint my_ilist_get_size (MyIList* self);
MyIterator* my_iterable_iterator (MyIterable* self);
MyIterator* my_iterator_new (GType g_type, GBoxedCopyFunc g_dup_func, GDestroyNotify g_destroy_func, MyIList* i);
MyIterator* my_iterator_construct (GType object_type, GType g_type, GBoxedCopyFunc g_dup_func, GDestroyNotify g_destroy_func, MyIList* i);
gboolean my_iterator_next (MyIterator* self);
gboolean my_iterator_prev (MyIterator* self);
gpointer my_iterator_get (MyIterator* self);
MyList* my_list_new (GType g_type, GBoxedCopyFunc g_dup_func, GDestroyNotify g_destroy_func, GEqualFunc func, GCompareFunc cfunc);
MyList* my_list_construct (GType object_type, GType g_type, GBoxedCopyFunc g_dup_func, GDestroyNotify g_destroy_func, GEqualFunc func, GCompareFunc cfunc);
MyList* my_list_slice (MyList* self, gint start, gint end);
void my_list_sort (MyList* self);
gpointer* my_list_to_array (MyList* self, int* result_length1);
void my_list_clear (MyList* self);
GEqualFunc my_list_get_equal_func (MyList* self);
GType my_ptr_list_get_type (void) G_GNUC_CONST;
MyPtrList* my_ptr_list_new (void);
MyPtrList* my_ptr_list_construct (GType object_type);
void** my_ptr_list_get_data (MyPtrList* self);


G_END_DECLS

#endif
